{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "StrategyConfig",
  "type": "object",
  "required": [
    "manager",
    "nodes",
    "owner"
  ],
  "properties": {
    "manager": {
      "$ref": "#/definitions/Addr"
    },
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Node"
      }
    },
    "owner": {
      "$ref": "#/definitions/Addr"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Action": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "swap"
          ],
          "properties": {
            "swap": {
              "$ref": "#/definitions/Swap"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "limit_order"
          ],
          "properties": {
            "limit_order": {
              "$ref": "#/definitions/FinLimitOrder"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "distribute"
          ],
          "properties": {
            "distribute": {
              "$ref": "#/definitions/Distribution"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Cadence": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "blocks"
          ],
          "properties": {
            "blocks": {
              "type": "object",
              "required": [
                "interval"
              ],
              "properties": {
                "interval": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                },
                "previous": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "type": "object",
              "required": [
                "duration"
              ],
              "properties": {
                "duration": {
                  "$ref": "#/definitions/Duration"
                },
                "previous": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Timestamp"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "cron"
          ],
          "properties": {
            "cron": {
              "type": "object",
              "required": [
                "expr"
              ],
              "properties": {
                "expr": {
                  "type": "string"
                },
                "previous": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Timestamp"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "limit_order"
          ],
          "properties": {
            "limit_order": {
              "type": "object",
              "required": [
                "pair_address",
                "side",
                "strategy"
              ],
              "properties": {
                "pair_address": {
                  "$ref": "#/definitions/Addr"
                },
                "previous": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Decimal"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "side": {
                  "$ref": "#/definitions/Side"
                },
                "strategy": {
                  "$ref": "#/definitions/PriceStrategy"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Condition": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "timestamp_elapsed"
          ],
          "properties": {
            "timestamp_elapsed": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "blocks_completed"
          ],
          "properties": {
            "blocks_completed": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "schedule"
          ],
          "properties": {
            "schedule": {
              "$ref": "#/definitions/Schedule"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "can_swap"
          ],
          "properties": {
            "can_swap": {
              "$ref": "#/definitions/Swap"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "fin_limit_order_filled"
          ],
          "properties": {
            "fin_limit_order_filled": {
              "type": "object",
              "required": [
                "pair_address",
                "price",
                "side"
              ],
              "properties": {
                "owner": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "pair_address": {
                  "$ref": "#/definitions/Addr"
                },
                "price": {
                  "$ref": "#/definitions/Decimal"
                },
                "side": {
                  "$ref": "#/definitions/Side"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "balance_available"
          ],
          "properties": {
            "balance_available": {
              "type": "object",
              "required": [
                "amount"
              ],
              "properties": {
                "address": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "amount": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "strategy_status"
          ],
          "properties": {
            "strategy_status": {
              "type": "object",
              "required": [
                "contract_address",
                "manager_contract",
                "status"
              ],
              "properties": {
                "contract_address": {
                  "$ref": "#/definitions/Addr"
                },
                "manager_contract": {
                  "$ref": "#/definitions/Addr"
                },
                "status": {
                  "$ref": "#/definitions/StrategyStatus"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "oracle_price"
          ],
          "properties": {
            "oracle_price": {
              "type": "object",
              "required": [
                "asset",
                "direction",
                "price"
              ],
              "properties": {
                "asset": {
                  "type": "string"
                },
                "direction": {
                  "$ref": "#/definitions/Direction"
                },
                "price": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Destination": {
      "type": "object",
      "required": [
        "recipient",
        "shares"
      ],
      "properties": {
        "label": {
          "type": [
            "string",
            "null"
          ]
        },
        "recipient": {
          "$ref": "#/definitions/Recipient"
        },
        "shares": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Direction": {
      "type": "string",
      "enum": [
        "above",
        "below"
      ]
    },
    "Distribution": {
      "type": "object",
      "required": [
        "denoms",
        "destinations"
      ],
      "properties": {
        "denoms": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "destinations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Destination"
          }
        }
      },
      "additionalProperties": false
    },
    "Duration": {
      "type": "object",
      "required": [
        "nanos",
        "secs"
      ],
      "properties": {
        "nanos": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "secs": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "FinLimitOrder": {
      "type": "object",
      "required": [
        "bid_denom",
        "pair_address",
        "side",
        "strategy"
      ],
      "properties": {
        "bid_amount": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint128"
            },
            {
              "type": "null"
            }
          ]
        },
        "bid_denom": {
          "type": "string"
        },
        "current_order": {
          "anyOf": [
            {
              "$ref": "#/definitions/StaleOrder"
            },
            {
              "type": "null"
            }
          ]
        },
        "pair_address": {
          "$ref": "#/definitions/Addr"
        },
        "side": {
          "$ref": "#/definitions/Side"
        },
        "strategy": {
          "$ref": "#/definitions/PriceStrategy"
        }
      },
      "additionalProperties": false
    },
    "FinRoute": {
      "type": "object",
      "required": [
        "pair_address"
      ],
      "properties": {
        "pair_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false
    },
    "Node": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "action"
          ],
          "properties": {
            "action": {
              "type": "object",
              "required": [
                "action",
                "index"
              ],
              "properties": {
                "action": {
                  "$ref": "#/definitions/Action"
                },
                "index": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0.0
                },
                "next": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "condition"
          ],
          "properties": {
            "condition": {
              "type": "object",
              "required": [
                "condition",
                "index"
              ],
              "properties": {
                "condition": {
                  "$ref": "#/definitions/Condition"
                },
                "index": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0.0
                },
                "on_failure": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                },
                "on_success": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Offset": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "exact"
          ],
          "properties": {
            "exact": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "percent"
          ],
          "properties": {
            "percent": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PriceStrategy": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "offset"
          ],
          "properties": {
            "offset": {
              "type": "object",
              "required": [
                "direction",
                "offset"
              ],
              "properties": {
                "direction": {
                  "$ref": "#/definitions/Direction"
                },
                "offset": {
                  "$ref": "#/definitions/Offset"
                },
                "tolerance": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Offset"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Recipient": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract"
          ],
          "properties": {
            "contract": {
              "type": "object",
              "required": [
                "address",
                "msg"
              ],
              "properties": {
                "address": {
                  "$ref": "#/definitions/Addr"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "deposit"
          ],
          "properties": {
            "deposit": {
              "type": "object",
              "required": [
                "memo"
              ],
              "properties": {
                "memo": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Schedule": {
      "type": "object",
      "required": [
        "cadence",
        "execution_rebate",
        "executors",
        "manager_address",
        "scheduler_address"
      ],
      "properties": {
        "cadence": {
          "$ref": "#/definitions/Cadence"
        },
        "execution_rebate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "executors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Addr"
          }
        },
        "jitter": {
          "anyOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "type": "null"
            }
          ]
        },
        "manager_address": {
          "$ref": "#/definitions/Addr"
        },
        "next": {
          "anyOf": [
            {
              "$ref": "#/definitions/Cadence"
            },
            {
              "type": "null"
            }
          ]
        },
        "scheduler_address": {
          "$ref": "#/definitions/Addr"
        }
      },
      "additionalProperties": false
    },
    "Side": {
      "type": "string",
      "enum": [
        "base",
        "quote"
      ]
    },
    "StaleOrder": {
      "type": "object",
      "required": [
        "price"
      ],
      "properties": {
        "price": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "StrategyStatus": {
      "type": "string",
      "enum": [
        "active",
        "paused"
      ]
    },
    "StreamingSwap": {
      "type": "object",
      "required": [
        "expected_receive_amount",
        "memo",
        "starting_block",
        "streaming_swap_blocks",
        "swap_amount"
      ],
      "properties": {
        "expected_receive_amount": {
          "$ref": "#/definitions/Coin"
        },
        "memo": {
          "type": "string"
        },
        "starting_block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "streaming_swap_blocks": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "swap_amount": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false
    },
    "Swap": {
      "type": "object",
      "required": [
        "adjustment",
        "maximum_slippage_bps",
        "minimum_receive_amount",
        "routes",
        "swap_amount"
      ],
      "properties": {
        "adjustment": {
          "$ref": "#/definitions/SwapAmountAdjustment"
        },
        "maximum_slippage_bps": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "minimum_receive_amount": {
          "$ref": "#/definitions/Coin"
        },
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwapRoute"
          }
        },
        "swap_amount": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false
    },
    "SwapAmountAdjustment": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "fixed"
          ]
        },
        {
          "type": "object",
          "required": [
            "linear_scalar"
          ],
          "properties": {
            "linear_scalar": {
              "type": "object",
              "required": [
                "base_receive_amount",
                "scalar"
              ],
              "properties": {
                "base_receive_amount": {
                  "$ref": "#/definitions/Coin"
                },
                "minimum_swap_amount": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Coin"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "scalar": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SwapRoute": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "fin"
          ],
          "properties": {
            "fin": {
              "$ref": "#/definitions/FinRoute"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "thorchain"
          ],
          "properties": {
            "thorchain": {
              "$ref": "#/definitions/ThorchainRoute"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ThorchainRoute": {
      "type": "object",
      "properties": {
        "affiliate_bps": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "affiliate_code": {
          "type": [
            "string",
            "null"
          ]
        },
        "latest_swap": {
          "anyOf": [
            {
              "$ref": "#/definitions/StreamingSwap"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_streaming_quantity": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "streaming_interval": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
